{"status":{},"contains_secrets":false,"product_version":"2.9.7.1","spec":{"description":"[Consul UI](http:\/\/@@{Consul_Bootstrap.address}@@:8500\/)","resources":{"client_attrs":{"6bc1dce9-74dd-627f-81a8-6b800afab8b8":{"y":128.5,"x":363},"cc1e7a7a_deployment":{"y":134.5,"x":618},"8b413df5-0c8c-de38-8dd7-ea6543f76cc9":{"y":91.5,"x":366},"608c4ab1-2d86-caae-b863-fa025987f897":{"y":215.25,"x":424.25},"7761966b_deployment":{"y":123.5,"x":317}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"200a31eb_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"521ad7cc_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"200a31eb_dag_cloned_1"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"AwxDeleteHost"}],"name":"082dd65c_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"AwxDeleteHost","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"55319844_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"8e13604f_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"082dd65c_dag_cloned_1"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7657f38c_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cc8da697_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"7657f38c_dag_cloned_1"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ac72914b_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f3d1fb83_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"ac72914b_dag_cloned_1"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"08d3c903_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"aa66c103_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"08d3c903_dag_cloned_1"},"variable_list":[]},"name":"action_restart"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_AddHost"}],"name":"af3ca93a_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_AddHost","attrs":{"exit_status":[],"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Set Variable\n# task_name:    AwxAddHost\n# description:  Add host to AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{cred_awx.username}@@'\nawx_password = '@@{cred_awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_inventory_id = int('@@{awx_inventory_id}@@')\nhost_ip = '@@{address}@@'\nhost_variables = @@{awx_host_variables}@@\n\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result\/response\n        if resp.ok:        \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_add_host(api,username,password,inventory_id,host_ip,host_variables='',host_enabled=True):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n    api_endpoint = \"\/api\/v2\/hosts\/\"\n    url = \"https:\/\/{}:{}{}\".format(\n        api,\n        api_port,\n        api_endpoint\n    )\n    method = \"POST\"\n\n    # endregion\n\n    # Compose the json payload\n    payload = {\n        'variables': json.dumps(host_variables),\n        'name': host_ip,\n        'enabled': host_enabled,\n        'inventory': inventory_id\n    }\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password,\n        payload\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'awx_host_id={0}'.format(resp['id'])\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        exit(1)\n# endregion\n        \nawx_add_host(awx_api,awx_username,awx_password,awx_inventory_id,host_ip,host_variables)","eval_variables":["awx_host_id"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"4d9c3443_runbook","main_task_local_reference":{"kind":"app_task","name":"af3ca93a_dag"},"variable_list":[]},"name":"AwxAddHost"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_AddHostToGroups"}],"name":"a0db7c43_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_AddHostToGroups","attrs":{"exit_status":[],"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200301\n# task_type:    Set Variable\n# task_name:    AwxAddHostToGroups\n# description:  Add host to AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{cred_awx.username}@@'\nawx_password = '@@{cred_awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_inventory_id = int('@@{awx_inventory_id}@@')\nawx_host_id = int('@@{awx_host_id}@@')\nawx_host_groups = @@{awx_host_groups}@@\ncalm_categories = @@{platform.metadata.categories}@@\ncalm_array_index = '@@{calm_array_index}@@'\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload=None):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        if payload:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n        else:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n\n        # deal with the result\/response\n        if resp.ok:     \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_add_host_to_groups(api,username,password,inventory_id,host_id,host_groups = [], *args):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n\n    for group in host_groups:\n        api_endpoint = \"\/api\/v2\/inventories\/\"\n        api_action = \"\/groups\"\n        api_query = \"?name=\"\n\n        url = \"https:\/\/{}:{}{}{}{}{}{}\".format(\n            api,\n            api_port,\n            api_endpoint,\n            inventory_id,\n            api_action,\n            api_query,\n            group\n        )\n        \n        method = \"GET\"\n\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password\n        )\n        \n        if len(json.loads(r.content)['results']) > 0:\n            group_id = json.loads(r.content)['results'][0]['id']\n            payload = {\n                'id': host_id\n            }\n        else:\n            print \"Group {0} does no exist\".format(group)\n            print \"Creating group: {0}\".format(group)\n            \n            api_endpoint = \"\/api\/v2\/hosts\/\"\n            api_action = \"\/groups\/\"\n            \n            method = \"POST\"\n\n            payload = {\n                'name': group,\n                'inventory': inventory_id\n            }\n\n            url = \"https:\/\/{}:{}{}{}{}\".format(\n                api,\n                api_port,\n                api_endpoint,\n                host_id,\n                api_action,            \n            )\n\n            r = make_api_call(\n                url,\n                method,\n                username,\n                password,\n                payload\n            )\n            \n            if r.ok:\n                print \"Host added to new group {0}\".format(group)\n                continue\n            else:\n                print 'Post request failed', r.content\n                exit(1)            \n\n        api_endpoint = \"\/api\/v2\/groups\/\"\n        api_action = \"\/hosts\/\"\n\n        method = \"POST\"\n\n        url = \"https:\/\/{}:{}{}{}{}\".format(\n            api,\n            api_port,\n            api_endpoint,\n            group_id,\n            api_action,            \n        )\n\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password,\n            payload\n        )\n\n        if r.ok:\n            print \"Host added to group {0}\".format(group)\n        else:\n            print 'Post request failed', r.content\n            exit(1)\n\ndef merge_groups(awx_host_groups,calm_categories):\n  for k, v in calm_categories.items():\n    awx_host_groups.append(k + \"_\" + v)\n  \n  return awx_host_groups\n# endregion\n\nmerge_groups(awx_host_groups,calm_categories)\n\nif calm_array_index != \"0\":\n  sleep(30)\n\nawx_add_host_to_groups(awx_api,awx_username,awx_password,awx_inventory_id,awx_host_id,awx_host_groups)\nprint \"awx_host_groups={0}\".format(awx_host_groups)","eval_variables":["awx_host_groups"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"561e8537_runbook","main_task_local_reference":{"kind":"app_task","name":"a0db7c43_dag"},"variable_list":[]},"name":"AwxHostToGroup"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_DeleteHost"}],"name":"d392813f_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_DeleteHost","attrs":{"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Execute\n# task_name:    AwxDeleteHost\n# description:  Delete host from AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{cred_awx.username}@@'\nawx_password = '@@{cred_awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nhost_id = int('@@{awx_host_id}@@')\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result\/response\n        if resp.ok: \n            exit(0)\n\n        else:\n            print \"Luis\"\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_delete_host(api,username,password,host_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n    api_endpoint = \"\/api\/v2\/hosts\/\"\n    url = \"https:\/\/{}:{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        host_id\n    )\n    method = \"DELETE\"\n\n    # endregion\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'Host with id {0} removed from inventory'.format(host_id)\n        print \"Here\"\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        print \"There\"\n        exit(1)\n# endregion\n        \nawx_delete_host(awx_api,awx_username,awx_password,host_id)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"55319844_runbook","main_task_local_reference":{"kind":"app_task","name":"d392813f_dag"},"variable_list":[]},"name":"AwxDeleteHost"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_RunPlaybook"}],"name":"0156d1bc_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_RunPlaybook","attrs":{"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200301\n# task_type:    Execute\n# task_name:    LaunchJobTemplate\n# description:  Launch a job template or also known playbook \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{cred_awx.username}@@'\nawx_password = '@@{cred_awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_job_template_id = int('@@{awx_job_template_id}@@')\nawx_extra_vars = @@{awx_job_template_extra_vars}@@\nawx_filter = '*_@@{calm_application_name}@@'\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload=None):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        if payload:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n        else:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n\n        # deal with the result\/response\n        if resp.ok:     \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_run_job_template(api,username,password,job_template_id,awx_filter,extra_vars=None):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n\n    api_endpoint = \"\/api\/v2\/job_templates\/\"\n    api_action = \"\/launch\/\"\n\n    url = \"https:\/\/{}:{}{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        job_template_id,\n        api_action\n    )\n    \n    method = \"POST\"\n\n    payload = {\n        \"extra_vars\": extra_vars,\n        \"limit\": awx_filter\n    }\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password,\n        payload\n    )\n\n    if r.ok:\n        job_id =  json.loads(r.content)['job']\n        print 'Ansible Job ID: {0}'.format(job_id)\n\n        awx_poll_job(api,username,password,job_id)\n        print 'Ansible job status: successful'\n    else:\n        print 'Request failed', r.content\n        exit(1)\n    \n\ndef awx_poll_job(api,username,password,job_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n\n    api_endpoint = \"\/api\/v2\/jobs\/\"\n\n    url = \"https:\/\/{}:{}{}{}\/\".format(\n        api,\n        api_port,\n        api_endpoint,\n        job_id,\n    )\n    \n    method = \"GET\"\n\n    retries = 360\n    job_status = ''\n\n    while job_status != 'successful':\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password,\n        )\n\n        if r.ok:\n            job_status = json.loads(r.content)['status']\n\n            if job_status == \"failed\" or job_status == \"error\":\n                print \"Ansible job failed\"\n                exit(1)\n        else:\n            print 'Post request failed', r.content\n            exit(1)\n\n        sleep(10)\n        retries -= 1\n        if retries == 0:\n            # if job hasn't finished yet, give up\n            print 'Job may still running. Increase the retries or sleep time'\n            exit(0)\n\n# endregion\n        \nawx_run_job_template(awx_api,awx_username,awx_password,awx_job_template_id,awx_filter,awx_extra_vars)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d17c3a5a_runbook","main_task_local_reference":{"kind":"app_task","name":"0156d1bc_dag"},"variable_list":[]},"name":"AwxRunPlaybook"}],"depends_on_list":[],"name":"Consul_Server","port_list":[],"tier":"","variable_list":[{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_host_variables","value":"{\n  \"consul_node_role\": \"server\",\n  \"consul_iface\": \"eth0\"\n}","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_host_groups","value":"[]","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_host_id","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_WaitServer"},{"kind":"app_task","name":"1_AwxRunPlaybook"}],"name":"200a31eb_dag_cloned_1_cloned_1","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"0_WaitServer"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"1_AwxRunPlaybook"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_WaitServer","attrs":{"script":"# @@{Consul_Server_Package.id}@@ DO NOT DELETE THIS LINE. THIS IS JUST TO FORCE NO CONFLICT WHEN GROUPS CREATION","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1_AwxRunPlaybook","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"d17c3a5a_runbook_cloned_0"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"521ad7cc_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"200a31eb_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"AwxDeleteHost"}],"name":"082dd65c_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"AwxDeleteHost","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"55319844_runbook_cloned_0"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"8e13604f_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"082dd65c_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7657f38c_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cc8da697_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"7657f38c_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"ac72914b_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f3d1fb83_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"ac72914b_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"08d3c903_dag_cloned_1_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"aa66c103_runbook_cloned_0_cloned_0","main_task_local_reference":{"kind":"app_task","name":"08d3c903_dag_cloned_1_cloned_1"},"variable_list":[]},"name":"action_restart"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_AddHost"}],"name":"af3ca93a_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_AddHost","attrs":{"exit_status":[],"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Set Variable\n# task_name:    AwxAddHost\n# description:  Add host to AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{cred_awx.username}@@'\nawx_password = '@@{cred_awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_inventory_id = int('@@{awx_inventory_id}@@')\nhost_ip = '@@{address}@@'\nhost_variables = @@{awx_host_variables}@@\n\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result\/response\n        if resp.ok:        \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_add_host(api,username,password,inventory_id,host_ip,host_variables='',host_enabled=True):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n    api_endpoint = \"\/api\/v2\/hosts\/\"\n    url = \"https:\/\/{}:{}{}\".format(\n        api,\n        api_port,\n        api_endpoint\n    )\n    method = \"POST\"\n\n    # endregion\n\n    # Compose the json payload\n    payload = {\n        'variables': json.dumps(host_variables),\n        'name': host_ip,\n        'enabled': host_enabled,\n        'inventory': inventory_id\n    }\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password,\n        payload\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'awx_host_id={0}'.format(resp['id'])\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        exit(1)\n# endregion\n        \nawx_add_host(awx_api,awx_username,awx_password,awx_inventory_id,host_ip,host_variables)","eval_variables":["awx_host_id"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"4d9c3443_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"af3ca93a_dag_cloned_1"},"variable_list":[]},"name":"AwxAddHost"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_AddHostToGroups"}],"name":"a0db7c43_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_AddHostToGroups","attrs":{"exit_status":[],"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200301\n# task_type:    Set Variable\n# task_name:    AwxAddHostToGroups\n# description:  Add host to AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{cred_awx.username}@@'\nawx_password = '@@{cred_awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_inventory_id = int('@@{awx_inventory_id}@@')\nawx_host_id = int('@@{awx_host_id}@@')\nawx_host_groups = @@{awx_host_groups}@@\ncalm_categories = @@{platform.metadata.categories}@@\ncalm_array_index = '@@{calm_array_index}@@'\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload=None):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        if payload:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n        else:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n\n        # deal with the result\/response\n        if resp.ok:     \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_add_host_to_groups(api,username,password,inventory_id,host_id,host_groups = [], *args):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n\n    for group in host_groups:\n        api_endpoint = \"\/api\/v2\/inventories\/\"\n        api_action = \"\/groups\"\n        api_query = \"?name=\"\n\n        url = \"https:\/\/{}:{}{}{}{}{}{}\".format(\n            api,\n            api_port,\n            api_endpoint,\n            inventory_id,\n            api_action,\n            api_query,\n            group\n        )\n        \n        method = \"GET\"\n\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password\n        )\n        \n        if len(json.loads(r.content)['results']) > 0:\n            group_id = json.loads(r.content)['results'][0]['id']\n            payload = {\n                'id': host_id\n            }\n        else:\n            print \"Group {0} does no exist\".format(group)\n            print \"Creating group: {0}\".format(group)\n            \n            api_endpoint = \"\/api\/v2\/hosts\/\"\n            api_action = \"\/groups\/\"\n            \n            method = \"POST\"\n\n            payload = {\n                'name': group,\n                'inventory': inventory_id\n            }\n\n            url = \"https:\/\/{}:{}{}{}{}\".format(\n                api,\n                api_port,\n                api_endpoint,\n                host_id,\n                api_action,            \n            )\n\n            r = make_api_call(\n                url,\n                method,\n                username,\n                password,\n                payload\n            )\n            \n            if r.ok:\n                print \"Host added to new group {0}\".format(group)\n                continue\n            else:\n                print 'Post request failed', r.content\n                exit(1)            \n\n        api_endpoint = \"\/api\/v2\/groups\/\"\n        api_action = \"\/hosts\/\"\n\n        method = \"POST\"\n\n        url = \"https:\/\/{}:{}{}{}{}\".format(\n            api,\n            api_port,\n            api_endpoint,\n            group_id,\n            api_action,            \n        )\n\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password,\n            payload\n        )\n\n        if r.ok:\n            print \"Host added to group {0}\".format(group)\n        else:\n            print 'Post request failed', r.content\n            exit(1)\n\ndef merge_groups(awx_host_groups,calm_categories):\n  for k, v in calm_categories.items():\n    awx_host_groups.append(k + \"_\" + v)\n  \n  return awx_host_groups\n# endregion\n\nmerge_groups(awx_host_groups,calm_categories)\n\nif calm_array_index != \"0\":\n  sleep(30)\n\nawx_add_host_to_groups(awx_api,awx_username,awx_password,awx_inventory_id,awx_host_id,awx_host_groups)\nprint \"awx_host_groups={0}\".format(awx_host_groups)","eval_variables":["awx_host_groups"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"561e8537_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"a0db7c43_dag_cloned_1"},"variable_list":[]},"name":"AwxHostToGroup"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_DeleteHost"}],"name":"d392813f_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_DeleteHost","attrs":{"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200214\n# task_type:    Execute\n# task_name:    AwxDeleteHost\n# description:  Delete host from AWX inventory \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{cred_awx.username}@@'\nawx_password = '@@{cred_awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nhost_id = int('@@{awx_host_id}@@')\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            headers=headers,\n            verify=False\n        )\n\n        # deal with the result\/response\n        if resp.ok: \n            exit(0)\n\n        else:\n            print \"Luis\"\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_delete_host(api,username,password,host_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n    api_endpoint = \"\/api\/v2\/hosts\/\"\n    url = \"https:\/\/{}:{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        host_id\n    )\n    method = \"DELETE\"\n\n    # endregion\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password\n        )\n\n    if r.ok:\n        resp = json.loads(r.content)\n        print 'Host with id {0} removed from inventory'.format(host_id)\n        print \"Here\"\n        exit(0)\n    else:\n        print 'Post request failed', r.content\n        print \"There\"\n        exit(1)\n# endregion\n        \nawx_delete_host(awx_api,awx_username,awx_password,host_id)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"55319844_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"d392813f_dag_cloned_1"},"variable_list":[]},"name":"AwxDeleteHost"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0_RunPlaybook"}],"name":"0156d1bc_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0_RunPlaybook","attrs":{"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     jose.gomez@nutanix.com\n# * version:    20200301\n# task_type:    Execute\n# task_name:    LaunchJobTemplate\n# description:  Launch a job template or also known playbook \n# endregion\n\n# region capture Calm variables\n# * Capture variables here. This makes sure Calm macros are not referenced\n# * anywhere else in order to improve maintainability.\nawx_username = '@@{cred_awx.username}@@'\nawx_password = '@@{cred_awx.secret}@@'\nawx_api = '@@{awx_ip}@@'\nawx_job_template_id = int('@@{awx_job_template_id}@@')\nawx_extra_vars = @@{awx_job_template_extra_vars}@@\nawx_filter = '*_@@{calm_application_name}@@'\n# endregion\n\n# region functions\ndef make_api_call(url,method,username,username_secret,payload=None):\n    \"\"\"Makes an API call to an external API.\n\n    Args:\n        url: The URL for the external REST API endpoint.\n        method: The REST method to use.\n        username: The API user name.\n        username_secret: The API user name password.\n        payload: The JSON payload to include in the call.\n    \n    Returns:\n        The API response.\n    \"\"\"\n    headers = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n    }\n    while True:\n        print(\"Making a {} API call to {}\".format(method, url))\n        if payload:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n        else:\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                headers=headers,\n                verify=False\n            )\n\n        # deal with the result\/response\n        if resp.ok:     \n            return resp\n\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(\n                json.dumps(\n                    json.loads(resp.content), \n                    indent=4)))\n            exit(1)\n\ndef awx_run_job_template(api,username,password,job_template_id,awx_filter,extra_vars=None):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n\n    api_endpoint = \"\/api\/v2\/job_templates\/\"\n    api_action = \"\/launch\/\"\n\n    url = \"https:\/\/{}:{}{}{}{}\".format(\n        api,\n        api_port,\n        api_endpoint,\n        job_template_id,\n        api_action\n    )\n    \n    method = \"POST\"\n\n    payload = {\n        \"extra_vars\": extra_vars,\n        \"limit\": awx_filter\n    }\n\n    r = make_api_call(\n        url,\n        method,\n        username,\n        password,\n        payload\n    )\n\n    if r.ok:\n        job_id =  json.loads(r.content)['job']\n        print 'Ansible Job ID: {0}'.format(job_id)\n\n        awx_poll_job(api,username,password,job_id)\n        print 'Ansible job status: successful'\n    else:\n        print 'Request failed', r.content\n        exit(1)\n    \n\ndef awx_poll_job(api,username,password,job_id):\n    # region prepare api call\n    # Form method, url and headers for the API call\n    api_port = \"443\"\n\n    api_endpoint = \"\/api\/v2\/jobs\/\"\n\n    url = \"https:\/\/{}:{}{}{}\/\".format(\n        api,\n        api_port,\n        api_endpoint,\n        job_id,\n    )\n    \n    method = \"GET\"\n\n    retries = 360\n    job_status = ''\n\n    while job_status != 'successful':\n        r = make_api_call(\n            url,\n            method,\n            username,\n            password,\n        )\n\n        if r.ok:\n            job_status = json.loads(r.content)['status']\n\n            if job_status == \"failed\" or job_status == \"error\":\n                print \"Ansible job failed\"\n                exit(1)\n        else:\n            print 'Post request failed', r.content\n            exit(1)\n\n        sleep(10)\n        retries -= 1\n        if retries == 0:\n            # if job hasn't finished yet, give up\n            print 'Job may still running. Increase the retries or sleep time'\n            exit(0)\n\n# endregion\n        \nawx_run_job_template(awx_api,awx_username,awx_password,awx_job_template_id,awx_filter,awx_extra_vars)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d17c3a5a_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"0156d1bc_dag_cloned_1"},"variable_list":[]},"name":"AwxRunPlaybook"}],"depends_on_list":[],"name":"Consul_Bootstrap","port_list":[],"tier":"","variable_list":[{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_host_variables","value":"{\n  \"consul_node_role\": \"bootstrap\",\n  \"consul_iface\": \"eth0\"\n}","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_host_groups","value":"[]","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_host_id","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Consul_Server_AHV"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"8730f237_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3103afd3_runbook","main_task_local_reference":{"kind":"app_task","name":"8730f237_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Consul_Server_AHV"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3ca0dfbe_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"032ed784_runbook","main_task_local_reference":{"kind":"app_task","name":"3ca0dfbe_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Consul_Server_AHV","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"cred_ansible"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"consul-server-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"e28bce98-3eef-4be7-8df9-bf9726dccba2"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":4096,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nhostname: @@{name}@@\nusers:\n  - name: @@{cred_ansible.username}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\nssh_pwauth: True\nchpasswd:\n  list: |\n    @@{cred_ansible.username}@@:@@{cred_ansible.secret}@@\n  expire: False"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"4ad90864-dcc6-47d1-9dfb-9feede5927a5","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"CentOS_7_Cloud","uuid":"c9b309c9-1e82-0151-6c16-68cbae7ad375"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":{"Environment":"Dev"}},"variable_list":[]},{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Consul_Bootstrap_AHV"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"8730f237_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"3103afd3_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"8730f237_dag_cloned_1"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Consul_Bootstrap_AHV"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3ca0dfbe_dag_cloned_1","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"032ed784_runbook_cloned_0","main_task_local_reference":{"kind":"app_task","name":"3ca0dfbe_dag_cloned_1"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"Consul_Bootstrap_AHV","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"cred_ansible"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"consul-leader-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"e28bce98-3eef-4be7-8df9-bf9726dccba2"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":4096,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nhostname: @@{name}@@\nusers:\n  - name: @@{cred_ansible.username}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\nssh_pwauth: True\nchpasswd:\n  list: |\n    @@{cred_ansible.username}@@:@@{cred_ansible.secret}@@\n  expire: False"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"4ad90864-dcc6-47d1-9dfb-9feede5927a5","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"CentOS_7_Cloud","uuid":"c9b309c9-1e82-0151-6c16-68cbae7ad375"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":{"Environment":"Dev"}},"variable_list":[]}],"credential_definition_list":[{"username":"ansible","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"cred_ansible"},{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"cred_awx"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Consul_Server"}],"name":"Consul_Server_Package","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Consul_Server_Package"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"0_WaitBootstrap"},{"kind":"app_task","name":"1_AwxAddHost"},{"kind":"app_task","name":"2_AwxHostToGroup"}],"name":"b0ab848c_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1_AwxAddHost"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2_AwxHostToGroup"}},{"from_task_reference":{"kind":"app_task","name":"0_WaitBootstrap"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"1_AwxAddHost"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"0_WaitBootstrap","state":"ACTIVE","attrs":{"script":"# @@{Consul_Bootstrap_Package.id}@@ DO NOT DELETE THIS LINE. THIS IS JUST TO FORCE NO CONFLICT WHEN GROUPS CREATION","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"1_AwxAddHost","state":"ACTIVE","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"4d9c3443_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Server"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"2_AwxHostToGroup","state":"ACTIVE","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"561e8537_runbook"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"f9b368e0_runbook_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"b0ab848c_dag_cloned_1"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Consul_Server_Package"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"421527d2_dag_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"99a4f68f_runbook_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"421527d2_dag_cloned_1"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"Consul_Bootstrap"}],"name":"Consul_Bootstrap_Package","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Consul_Bootstrap_Package"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"1_AwxAddHost"},{"kind":"app_task","name":"2_AwxHostToGroup"}],"name":"b0ab848c_dag_cloned_1_cloned_1","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1_AwxAddHost"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2_AwxHostToGroup"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"1_AwxAddHost","state":"ACTIVE","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"4d9c3443_runbook_cloned_0"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"Consul_Bootstrap"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"2_AwxHostToGroup","state":"ACTIVE","attrs":{"type":"CALL_RUNBOOK","inarg_list":[],"runbook_reference":{"kind":"app_runbook","name":"561e8537_runbook_cloned_0"}},"timeout_secs":"0","type":"CALL_RUNBOOK","variable_list":[]}],"description":"","name":"f9b368e0_runbook_cloned_0_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"b0ab848c_dag_cloned_1_cloned_1"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Consul_Bootstrap_Package"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"421527d2_dag_cloned_1_cloned_1","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"99a4f68f_runbook_cloned_0_cloned_0","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"421527d2_dag_cloned_1_cloned_1"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"CentOS 7 Cloud Image","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"CentOS_7_Cloud","version":"","options":{"type":"","name":"CentOS_7_Cloud","resources":{"image_type":"DISK_IMAGE","checksum":{},"source_uri":"http:\/\/download.nutanix.com\/calm\/CentOS-7-x86_64-GenericCloud.qcow2","version":{"product_version":"7","type":"","product_name":"CentOS"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"cc1e7a7a_deployment","min_replicas":"2","default_replicas":"2","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"99","package_local_reference_list":[{"kind":"app_package","name":"Consul_Server_Package"}],"substrate_local_reference":{"kind":"app_substrate","name":"Consul_Server_AHV"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"7761966b_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Consul_Bootstrap_Package"}],"substrate_local_reference":{"kind":"app_substrate","name":"Consul_Bootstrap_AHV"},"variable_list":[],"description":""}],"description":"","action_list":[],"name":"AHV","variable_list":[{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_job_template_extra_vars","value":"{\n  \"consul_client_address\": \"0.0.0.0\",\n  \"consul_group_name\": \"CalmApplication_@@{calm_application_name}@@\"\n}","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_job_template_id","value":"14","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_inventory_id","value":"2","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"awx_ip","value":"awx.ukdemo.local","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"cred_ansible"},"type":"USER"},"name":"calm-ansible-consul"},"api_version":"3.0","metadata":{"last_update_time":"1583098696229912","kind":"blueprint","spec_version":72,"creation_time":"1582912724077561","name":"calm-ansible-consul"}}